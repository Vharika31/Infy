class Solution {
  public:
 struct meeting {
   int start;
   int end;
   int pos;
};
     bool static comparator(struct meeting m1, meeting m2) {
         if (m1.end < m2.end) return true;
         else if (m1.end > m2.end) return false;
         else if (m1.pos < m2.pos) return true;
         return false;
      }
    int maxMeetings(vector<int>& start, vector<int>& end) {
      int n = start.size();
        vector<meeting> meetings(n);

        for (int i = 0; i < n; i++) {
            meetings[i].start = start[i];
            meetings[i].end = end[i];
            meetings[i].pos = i + 1;
        }

        sort(meetings.begin(), meetings.end(), comparator);

        int count = 1;
        int lastEnd = meetings[0].end;

        for (int i = 1; i < n; i++) {
            if (meetings[i].start > lastEnd) {
                count++;
                lastEnd = meetings[i].end;
            }
        }

        return count;
    }
};


Python

class Solution:
    
   
    def maximumMeetings(self,start,end):
        z = list(zip(start,end))
        z.sort(key = lambda x:x[1])
        last = -1
        cnt = 0
        for i,j in z:
            if i>last:
                cnt = cnt+1
                last = j
        return cnt